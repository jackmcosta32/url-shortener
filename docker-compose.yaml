services:
  cache:
    image: redis:7.4.2-alpine
    hostname: cache-service
    container_name: url-shortener-cache-service
    ports:
      - '${CACHE_SERVICE_PORT}:6379'
    networks:
      - application-network
    environment:
      REDIS_USER: ${CACHE_SERVICE_HOST}
      REDIS_PASSWORD: ${CACHE_SERVICE_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'

  database:
    image: mongo:8.0
    restart: always
    hostname: database
    command: ['mongod', '--config', '/etc/mongod.conf']
    container_name: url-shortener-database
    ports:
      - '${DATABASE_PORT}:27017'
    deploy:
      resources:
        limits:
          cpus: '0.40'
          memory: '1GB'
    networks:
      - application-network
    volumes:
      - .volumes/mongodb/mongod.conf:/etc/mongod.conf:ro
      - .volumes/mongodb/mongodb-keyfile:/etc/mongodb-keyfile:ro
    environment:
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}

  backend1: &backend
    hostname: backend1
    container_name: url-shortener-backend-1
    depends_on:
      - cache
      - database
    ports:
      - '3001:${SERVER_PORT}'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/health']
      interval: 45s
      timeout: 5s
      retries: 5
      start_period: 5s
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.45'
          memory: '0.5GB'
    networks:
      - application-network
    environment:
      - PORT=${SERVER_PORT}
      - DATABASE_PORT=${DATABASE_PORT}
      - DATABASE_NAME=${DATABASE_NAME}
      - DATABASE_HOST=${DATABASE_HOST}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - CACHE_SERVICE_HOST=${CACHE_SERVICE_HOST}
      - CACHE_SERVICE_PASSWORD=${CACHE_SERVICE_PASSWORD}

  backend2:
    <<: *backend
    hostname: backend2
    container_name: url-shortener-backend-2
    ports:
      - '3002:${SERVER_PORT}'

  load-balancer:
    image: nginx:latest
    hostname: application
    container_name: url-shortener-load-balancer
    depends_on:
      backend1:
        condition: service_healthy
      backend2:
        condition: service_healthy
    ports:
      - '${SERVER_PORT}:3000'
    deploy:
      resources:
        limits:
          cpus: '0.10'
          memory: '0.5GB'
    networks:
      - application-network
    volumes:
      - ./.volumes/nginx/nginx.conf:/etc/nginx/nginx.conf:ro

  stress-test-application:
    container_name: url-shortener-stress-test-application
    profiles:
      - stress-test
    depends_on:
      - load-balancer
    ports:
      - '5665:${STRESS_TEST_DASHBOARD_PORT}'
    build:
      context: .
      dockerfile: apps/backend-e2e/Dockerfile
    networks:
      - application-network
    environment:
      - API_URL=${API_URL}
      - K6_WEB_DASHBOARD=${STRESS_TEST_DASHBOARD}
      - K6_WEB_DASHBOARD_HOST=${STRESS_TEST_DASHBOARD_HOST}
      - K6_WEB_DASHBOARD_PORT=${STRESS_TEST_DASHBOARD_PORT}
      - K6_WEB_DASHBOARD_OPEN=${STRESS_TEST_DASHBOARD_OPEN}
      - K6_WEB_DASHBOARD_PERIOD=${STRESS_TEST_DASHBOARD_PERIOD}
      - K6_WEB_DASHBOARD_EXPORT=${STRESS_TEST_DASHBOARD_EXPORT}

networks:
  application-network:
    driver: bridge
